{
  "name": "student-Arman ",
  "version": "1.0.0",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "nanoid": "^5.0.7"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}

import express from "express";
import cors from "cors";
import fs from "fs/promises";
import { nanoid } from "nanoid";
import { validateStudent } from "./validate.js";

const app = express();
app.use(cors());
app.use(express.json());

const DATA_FILE = "./students.data.json";

async function readDB() {
  const raw = await fs.readFile(DATA_FILE, "utf-8");
  return JSON.parse(raw);
}
async function writeDB(data) {
  await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));
}

app.get("/health", (_req, res) => res.json({ ok: true }));

app.get("/students", async (req, res) => {
  const q = (req.query.q || "").toString().toLowerCase();
  let students = await readDB();
  if (q) {
    students = students.filter(
      s =>
        s.name.toLowerCase().includes(q) ||
        (s.email || "").toLowerCase().includes(q)
    );
  }
  res.json(students);
});

app.get("/students/:id", async (req, res) => {
  const students = await readDB();
  const student = students.find(s => s.id === req.params.id);
  if (!student) return res.status(404).json({ error: "Not found" });
  res.json(student);
});

app.post("/students", async (req, res) => {
  const errors = validateStudent(req.body);
  if (errors.length) return res.status(400).json({ errors });

  const students = await readDB();
  const student = {
    id: nanoid(8),
    name: req.body.name.trim(),
    age: req.body.age,
    email: req.body.email || null
  };
  students.push(student);
  await writeDB(students);
  res.status(201).json(student);
});

app.put("/students/:id", async (req, res) => {
  const errors = validateStudent(req.body);
  if (errors.length) return res.status(400).json({ errors });

  const students = await readDB();
  const idx = students.findIndex(s => s.id === req.params.id);
  if (idx === -1) return res.status(404).json({ error: "Not found" });

  students[idx] = {
    id: students[idx].id,
    name: req.body.name.trim(),
    age: req.body.age,
    email: req.body.email || null
  };
  await writeDB(students);
  res.json(students[idx]);
});

app.patch("/students/:id", async (req, res) => {
  const students = await readDB();
  const idx = students.findIndex(s => s.id === req.params.id);
  if (idx === -1) return res.status(404).json({ error: "Not found" });

  const current = students[idx];
  const updated = { ...current, ...req.body };
  const errors = validateStudent(updated);
  if (errors.length) return res.status(400).json({ errors });

  students[idx] = updated;
  await writeDB(students);
  res.json(updated);
});

app.delete("/students/:id", async (req, res) => {
  const students = await readDB();
  const idx = students.findIndex(s => s.id === req.params.id);
  if (idx === -1) return res.status(404).json({ error: "Not found" });

  const removed = students.splice(idx, 1)[0];
  await writeDB(students);
  res.json({ deleted: removed.id });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Student API running at http://localhost:${PORT}`));

[
  { "id": "s1", "name": "Arman", "age": 20, "email": "alice@example.com" },
  { "id": "s2", "name": "Aman", "age": 22, "email": "bob@example.com" }
]

export function validateStudent(body) {
  const errors = [];
  if (typeof body.name !== "string" || body.name.trim().length < 2)
    errors.push("name must be a string â‰¥ 2 chars");
  if (!Number.isInteger(body.age) || body.age < 5 || body.age > 120)
    errors.push("age must be an integer between 5 and 120");
  if (body.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(body.email))
    errors.push("email must be valid if provided");
  return errors;
}
