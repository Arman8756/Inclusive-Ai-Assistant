/**
 * Simple Auth API using Node.js, Express, JWT
 * Run:  node server.js
 * Test: Use Postman or curl
 */

const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const app = express();
app.use(express.json());

// ====== CONFIG ======
const PORT = 5000;
const JWT_SECRET = "supersecretkey"; // change in production

// ====== FAKE DB ======
let users = []; // In-memory store (resets when server restarts)

// ====== REGISTER ======
app.post("/register", async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password)
    return res.status(400).json({ msg: "All fields required" });

  const exists = users.find((u) => u.username === username);
  if (exists) return res.status(400).json({ msg: "User already exists" });

  const hashed = await bcrypt.hash(password, 10);
  users.push({ username, password: hashed });

  res.json({ msg: "User registered successfully" });
});

// ====== LOGIN ======
app.post("/login", async (req, res) => {
  const { username, password } = req.body;
  const user = users.find((u) => u.username === username);
  if (!user) return res.status(400).json({ msg: "Invalid credentials" });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ msg: "Invalid credentials" });

  const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: "1h" });
  res.json({ msg: "Login success", token });
});

// ====== PROTECTED ROUTE ======
app.get("/profile", (req, res) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ msg: "No token" });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ msg: "Invalid token" });
    res.json({ msg: `Welcome ${user.username}`, user });
  });
});

// ====== START SERVER ======
app.listen(PORT, () => console.log(` Server running on http://localhost:${PORT}`));
